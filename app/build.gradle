apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-android-extensions'
//apply plugin: 'io.fabric'
apply plugin: 'com.cookpad.android.licensetools'
apply plugin: 'com.getkeepsafe.dexcount'


import org.apache.http.client.utils.URIBuilder

import java.util.regex.Pattern

def keystoreProperties = project.keystoreProperties

def googleServices = project.googleServices
def gcmSenderId = googleServices.project_info.project_number
def firebaseProjectId = googleServices.project_info.project_id

def buildConfigJson = project.buildConfigJson

static def fallbackUrl(String url){
    try{
        URI parsedUri = new URI(url)
        if(parsedUri.scheme == 'https' || parsedUri.scheme == 'http')
        {
            return url
        }else throw new Exception("The URI does not have an HTTP or HTTPS scheme.")
    }catch(Exception ex) {
        return new URIBuilder().setPath(url).setScheme("http").build().toString()
    }
}

static def makePropertyHashTableString(Properties properties){
    StringBuilder infix = new StringBuilder("")

    for(prop in properties){
        infix.append("put(\"${prop.key}\", ${prop.value}); ")
    }

    return "new java.util.Hashtable<String, String>(){{${infix.toString()}}}"
}

android {

    if (
            buildConfigJson.signing != null &&
            buildConfigJson.signing.releaseKeystoreLocation != null &&
            buildConfigJson.signing.releaseKeystoreLocation.length() > 0 &&
            buildConfigJson.signing.releaseAlias != null &&
            buildConfigJson.signing.releaseAlias.length() > 0 &&
            buildConfigJson.signing.releaseKeyPassword != null &&
            buildConfigJson.signing.releaseKeyPassword.length() > 0 &&
            buildConfigJson.signing.releaseStorePassword != null &&
            buildConfigJson.signing.releaseStorePassword.length() > 0
    ) {
        signingConfigs {
            sign_release {
                storeFile file(buildConfigJson.signing.releaseKeystoreLocation)
                keyAlias buildConfigJson.signing.releaseAlias
                keyPassword buildConfigJson.signing.releaseKeyPassword
                storePassword buildConfigJson.signing.releaseStorePassword
            }
        }
    }

    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    defaultConfig {
        if (buildConfigJson.overridePackageName != null && buildConfigJson.overridePackageName.length() > 0) {
            applicationId buildConfigJson.overridePackageName
        } else applicationId "kr.ac.snu.hcil.omnitrack"

        minSdkVersion 19

        targetSdkVersion rootProject.ext.targetSdkVersion
        vectorDrawables.useSupportLibrary = true

        def googleMapsKey = keystoreProperties.getProperty("GOOGLE_MAPS_API_KEY").toString()
        manifestPlaceholders = [GOOGLE_MAPS_API_KEY: googleMapsKey.replaceAll("\"", "").trim()]


        if (buildConfigJson.overrideAppName != null && buildConfigJson.overrideAppName.length() > 0) {
            manifestPlaceholders.appName = buildConfigJson.overrideAppName
            buildConfigField 'String', 'APP_NAME', "\"$buildConfigJson.overrideAppName\""
        } else {
            manifestPlaceholders.appName = "OmniTrack"
            buildConfigField 'String', 'APP_NAME', "\"OmniTrack\""
        }

        buildConfigField 'boolean', 'SHOW_TUTORIALS', "${buildConfigJson.showTutorials == null ? true : buildConfigJson.showTutorials}"
    }

    flavorDimensions "minApi"

    productFlavors {
        minApi19 {
            dimension "minApi"
            minSdkVersion 19
        }

        minApi21 {
            dimension "minApi"
            minSdkVersion 21
        }
    }

    defaultPublishConfig "minApi21Debug" // this is to avoid 64K method limit on Debug build.

    compileOptions {
        sourceCompatibility 1.8
        targetCompatibility 1.8
    }

    applicationVariants.all { variant ->
        if (variant.name.toLowerCase().contains("minapi") && variant.name.toLowerCase().contains("release")) {
            variant.generateBuildConfig.dependsOn("refreshVersionsByIncreasingVersionCode")
        } else
            variant.generateBuildConfig.dependsOn("refreshVersionsNotRelease")
    }

    dataBinding.enabled = false

    buildTypes {
        release {
            debuggable true
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            if (signingConfigs.hasProperty("sign_release")) {
                signingConfig signingConfigs.sign_release
            } else {
                println("The omnitrackBuildConfig.json file does not define an Android signing Keystore.")
            }

            manifestPlaceholders.appNameSuffix = ""
        }
        debug {
            applicationIdSuffix '.debug'
            versionNameSuffix '-Debug'

            manifestPlaceholders.appNameSuffix = " Debug"
        }
    }

    //preliminary check for google-services.json validaty.
    def matchClient

    buildTypes.each {
        buildType ->
            def finalApplicationId = buildType.applicationIdSuffix == null ? defaultConfig.applicationId : defaultConfig.applicationId + buildType.applicationIdSuffix
            matchClient = googleServices.client.find {
                println("Find matching service client with package name - ${finalApplicationId}")
                return it.client_info.android_client_info.package_name == finalApplicationId
            }
    }

    if (matchClient == null) {
        throw new IllegalStateException("google-services.json file does not contain a matching client information.")
    }

    buildTypes.each {
        buildType ->
            def finalApplicationId = buildType.applicationIdSuffix == null ? defaultConfig.applicationId : defaultConfig.applicationId + buildType.applicationIdSuffix

            buildType.buildConfigField 'String', 'OMNITRACK_SYNCHRONIZATION_SERVER_URL', "\"${fallbackUrl(buildConfigJson.synchronizationServerUrl)}\""
            buildType.buildConfigField 'String', 'OMNITRACK_MEDIA_STORAGE_SERVER_URL', "\"${fallbackUrl(buildConfigJson.mediaStorageUrl)}\""

            buildType.buildConfigField 'java.util.Hashtable<String, String>', 'apiKeyTable', makePropertyHashTableString(keystoreProperties)

            //type-specific properties
            /*
            File variantKeystorePropertiesFile = rootProject.file("keystore.${buildType.name}.properties")
            if (variantKeystorePropertiesFile.exists()) {
                def variantKeystoreProperties = new Properties()
                variantKeystoreProperties.load(new FileInputStream(variantKeystorePropertiesFile))
                variantKeystoreProperties.keySet().forEach {
                    buildType.buildConfigField 'String', it.toString(), variantKeystoreProperties.getProperty(it)
                }
            }*/

            def googleServiceClient = googleServices.client.find {
                println("Find matching service client with package name - ${finalApplicationId}")
                return it.client_info.android_client_info.package_name == finalApplicationId
            }

            if (googleServiceClient != null) {
                def googleAuthClientId = googleServiceClient.oauth_client.find { c -> c.client_type == 3 }.client_id
                def firebaseApiKey = googleServiceClient.api_key[0].current_key
                def mobileSdkAppId = googleServiceClient.client_info.mobilesdk_app_id

                buildType.buildConfigField 'String', 'FIREBASE_API_KEY', "\"$firebaseApiKey\""
                buildType.buildConfigField 'String', 'FIREBASE_AUTH_CLIENT_ID', "\"$googleAuthClientId\""
                buildType.buildConfigField 'String', 'FIREBASE_CLIENT_ID', "\"$mobileSdkAppId\""
            }

            buildType.buildConfigField 'String', 'FIREBASE_CLOUD_MESSAGING_SENDER_ID', "\"$gcmSenderId\""
            buildType.buildConfigField 'String', 'FIREBASE_PROJECT_ID', "\"$firebaseProjectId\""


            if (buildConfigJson.defaultExperimentId != null && buildConfigJson.defaultExperimentId.length() > 0) {
                buildType.buildConfigField 'String', 'DEFAULT_EXPERIMENT_ID', "\"$buildConfigJson.defaultExperimentId\""
            } else {
                buildType.buildConfigField 'String', 'DEFAULT_EXPERIMENT_ID', "null"
            }

            if(buildConfigJson.enableDynamicApiKeyModification == true){
                buildType.buildConfigField 'boolean', 'ENABLE_DYNAMIC_API_KEY_MODIFICATION', "true"
            }else{
                buildType.buildConfigField 'boolean', 'ENABLE_DYNAMIC_API_KEY_MODIFICATION', "false"
            }

    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }
    lintOptions {
        checkReleaseBuilds false
    }

    packagingOptions {
        exclude 'META-INF/rxjava.properties'

    }
}

kapt {
    useBuildCache = true
    generateStubs = true
}

configurations.all {
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        def requested = details.requested
        if (requested.group == 'androidx.legacy') {
            details.useVersion rootProject.ext.android_support_version
        } else if (requested.group == "org.jetbrains.kotlin") {
            details.useVersion rootProject.ext.kotlin_version
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    testImplementation 'junit:junit:4.12'

    implementation "androidx.appcompat:appcompat:$rootProject.ext.androidx_appcompat_version"
    implementation "androidx.recyclerview:recyclerview:$rootProject.ext.androidx_recyclerview_version"
    implementation "androidx.cardview:cardview:$rootProject.ext.android_support_version"
    implementation "androidx.preference:preference:$rootProject.ext.androidx_preference_version"
    implementation "androidx.core:core-ktx:1.0.2"

    implementation "androidx.constraintlayout:constraintlayout:$rootProject.ext.androidx_constraintlayout_version"
    implementation 'com.google.android:flexbox:1.1.0'

    implementation "com.google.android.material:material:$rootProject.ext.androidx_material_version"
    implementation "androidx.legacy:legacy-support-v4:$rootProject.ext.android_support_version"
    implementation "androidx.vectordrawable:vectordrawable:1.0.1"
    implementation "androidx.vectordrawable:vectordrawable-animated:$rootProject.ext.android_support_version"
    implementation "androidx.exifinterface:exifinterface:$rootProject.ext.android_support_version"

    implementation 'com.google.android.gms:play-services-maps:16.1.0'
    implementation 'com.google.android.gms:play-services-fitness:16.0.1'

    implementation 'com.google.firebase:firebase-core:16.0.9'
    implementation 'com.google.firebase:firebase-messaging:18.0.0'

    implementation 'androidx.lifecycle:lifecycle-extensions:2.0.0'
    def work_version = "2.0.1"
    implementation "androidx.work:work-runtime:$work_version"
    implementation "androidx.work:work-rxjava2:$work_version"

    // use -ktx for Kotlin
    kapt "android.arch.lifecycle:compiler:1.1.1"

    def anko_version = "0.10.8"
    implementation "org.jetbrains.anko:anko-commons:$anko_version" //no androidx
    implementation "org.jetbrains.anko:anko-sqlite:$anko_version"
    implementation "org.jetbrains.anko:anko-support-v4-commons:$anko_version"
    implementation "org.jetbrains.anko:anko-sdk19:$anko_version"
    implementation "org.jetbrains.anko:anko-appcompat-v7:$anko_version"

    implementation "com.google.dagger:dagger:$rootProject.ext.dagger_version"
    implementation "com.google.dagger:dagger-android:$rootProject.ext.dagger_version"
    kapt "com.google.dagger:dagger-android-processor:$rootProject.ext.dagger_version"
    kapt "com.google.dagger:dagger-compiler:$rootProject.ext.dagger_version"
    implementation project(':omnitrack_core')
    implementation project(':omnitrack_core_types')
    implementation project(':omnitrack_core_dependencyresolver')
    implementation project(':omnitrack_views')
    implementation project(':omnitrack_views_properties')



    implementation project(':material_dialog_core')
    implementation project(':material_about')
    implementation project(':fancybuttons')
    implementation project(':TedBottomPicker')
    implementation project(':AppUpdater:appupdater')
    implementation project(':android_commons')
    implementation project(':android_commons_view')

    implementation 'com.auth0.android:jwtdecode:1.3.0'

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation "com.google.code.gson:gson:$rootProject.ext.gson_version"
    implementation "io.reactivex.rxjava2:rxjava:$rootProject.ext.rxjava_version"
    implementation "io.reactivex.rxjava2:rxandroid:$rootProject.ext.rxandroid_version"
    implementation "com.github.pwittchen:reactivenetwork-rx2:$rootProject.ext.reactive_network_version"
    implementation 'jp.wasabeef:recyclerview-animators:3.0.0'
    implementation 'com.github.markushi:android-ui:1.2'
    implementation "com.github.ybq:Android-SpinKit:$rootProject.ext.spinkit_version"
    implementation "com.squareup.okhttp3:okhttp:$rootProject.ext.okhttp_version"
    implementation "com.squareup.retrofit2:retrofit:$rootProject.ext.retrofit_version"
    implementation "com.squareup.retrofit2:converter-gson:$rootProject.ext.retrofit_version"
    implementation "com.squareup.retrofit2:adapter-rxjava2:$rootProject.ext.retrofit_version"
    implementation "com.squareup.retrofit2:converter-scalars:$rootProject.ext.retrofit_version"
    implementation "com.squareup.picasso:picasso:$rootProject.ext.picasso_version"
    implementation 'us.feras.mdv:markdownview:1.1.0'
    implementation 'com.github.tbruyelle:rxpermissions:0.10.2' //no androidx
    implementation 'com.patloew.rxlocation:rxlocation:1.0.5' //no androidx
    implementation 'uk.co.samuelwall:material-tap-target-prompt:2.14.0' //no androidx
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:1.6.3'
    releaseImplementation 'com.squareup.leakcanary:leakcanary-android-no-op:1.6.3'
    debugImplementation 'com.squareup.leakcanary:leakcanary-support-fragment:1.6.3'
    compileOnly 'javax.annotation:jsr250-api:1.0'
    implementation 'uk.co.chrisjenx:calligraphy:2.3.0'
    implementation "com.github.VictorAlbertos:RxActivityResult:$rootProject.ext.rxactivityresult_version"
    implementation 'com.github.salomonbrys.kotson:kotson:2.5.0'
    implementation 'org.nield:kotlin-statistics:1.2.1'

    implementation 'com.jaredrummler:material-spinner:1.3.1'
}

repositories {
    jcenter()
    maven {
        url "http://dl.bintray.com/kotlin/exposed"
    }
    maven { url "https://jitpack.io" }

    maven {
        repositories {
            url 'https://oss.sonatype.org/content/repositories/releases/'
        }
    }

    maven {
        url "https://oss.sonatype.org/content/repositories/snapshots"
    }

    maven { url 'https://maven.google.com' }
}

apply plugin: 'realm-android'

ext.refreshVersion = {
    increaseVersionCode ->
        def versionPropsFile = rootProject.file("version.properties")
        Properties versionProperties = new Properties()
        versionProperties.load(new FileInputStream(versionPropsFile))
        def releaseIncrease = increaseVersionCode && buildConfigJson.disableVersionAutoIncrement != true && buildConfigJson.overrideVersionCode == null ? 1 : 0
        def patchIncrease = (buildConfigJson.disableVersionAutoIncrement == true || buildConfigJson.overrideVersionName != null) ? 0 : 1


        def patternVersionNumber = Pattern.compile("(\\d+)\\.(\\d+)\\.(\\d+)\\.(\\d+)(-[a-zA-Z0-9]+)?")
        def matcherVersionNumber = patternVersionNumber.matcher(versionProperties["versionName"])
        matcherVersionNumber.find()
        def majorVersion = Integer.parseInt(matcherVersionNumber.group(1))
        def minorVersion = Integer.parseInt(matcherVersionNumber.group(2))
        def pointVersion = Integer.parseInt(matcherVersionNumber.group(3))
        def buildVersion = Integer.parseInt(matcherVersionNumber.group(4))
        def suffix = matcherVersionNumber.group(5)

        def versionName = majorVersion + "." + minorVersion + "." + (pointVersion + releaseIncrease) + "." + (buildVersion + patchIncrease) + suffix
        def versionCode = versionProperties["versionCode"].toInteger() + releaseIncrease

        if (releaseIncrease > 0 || patchIncrease > 0) {
            println("Version name or code were auto-incremented.")
            versionProperties.setProperty("versionName", versionName)
            versionProperties.setProperty("versionCode", versionCode.toString())
            versionProperties.store(versionPropsFile.newWriter(), "auto-incremented version information.")
        }

        def finalVersionName = buildConfigJson.overrideVersionName ?: versionName
        def finalVersionCode = buildConfigJson.overrideVersionCode ?: versionCode

        android.defaultConfig.versionName = finalVersionName
        android.defaultConfig.versionCode = finalVersionCode

        android.buildTypes.each {
            buildType ->
                buildType.buildConfigField 'String', 'SOURCE_VERSION_NAME', "\"${versionName}\""
                buildType.buildConfigField 'int', 'SOURCE_VERSION_CODE', "${versionCode}"
                buildType.buildConfigField 'String', 'APP_VERSION_NAME', "\"${finalVersionName}\""
                buildType.buildConfigField 'int', 'APP_VERSION_CODE', "${finalVersionCode}"


        }

        android.applicationVariants.all {
            variant ->
                variant.outputs.each {
                    output ->
                        output.versionCodeOverride = finalVersionCode
                        output.versionNameOverride = finalVersionName
                }

                variant.mergedFlavor.manifestPlaceholders.versionName = finalVersionName
                variant.mergedFlavor.manifestPlaceholders.versionCode = finalVersionCode
        }

        println("new versionName: ${finalVersionName}, versionCode: ${finalVersionCode}")

        android.applicationVariants.all {
            variant ->
                variant.outputs.all { output ->
                    outputFileName = "${variant.name}-${finalVersionName}.apk"
                }

                variant.resValue "string", "version_name", finalVersionName
        }
}

task("refreshVersionsNotRelease").doLast {
    refreshVersion(false)
}

task("refreshVersionsByIncreasingVersionCode").doLast {
    refreshVersion(true)
}